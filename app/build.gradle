apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'
apply plugin: 'spoon'

// Versioning information
def versionMajor = 0
def versionMinor = 6
def versionPatch = 0

android {

    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {

        applicationId "com.orogersilva.bmimanager"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch * 1
        versionName "${versionMajor}.${versionMinor}.${versionPatch}-SNAPSHOT"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        release {

            storeFile rootProject.file('bmimanager.jks')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASSWORD")
        }
    }

    buildTypes {

        debug {

            applicationIdSuffix ".debug"

            ext.betaDistributionGroupAliasesFilePath="${rootProject.getRootDir()}/crashlytics/group_aliases.txt"
            ext.betaDistributionReleaseNotesFilePath="${rootProject.getRootDir()}/crashlytics/release_notes.txt"
        }

        release {

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliasesFilePath="${rootProject.getRootDir()}/crashlytics/group_aliases.txt"
            ext.betaDistributionReleaseNotesFilePath="${rootProject.getRootDir()}/crashlytics/release_notes.txt"
        }
    }

    lintOptions {

        abortOnError false
    }

    testBuildType obtainTestBuildType()

    play {

        serviceAccountEmail = System.getenv("SERVICE_ACCOUNT_EMAIL")
        pk12File = rootProject.file('play.p12')
        track = 'alpha'

        uploadImages = true
    }
    buildToolsVersion '25.0.0'
}

spoon {

    debug = true
}

// Show test status in console.
tasks.withType(Test) {

    testLogging {
        events "passed", "failed"
    }
}

def obtainTestBuildType() {

    def result = "debug"

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    return result
}

configurations.all {

    resolutionStrategy {

        force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    }
}

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"

    compile("com.crashlytics.sdk.android:crashlytics:$rootProject.crashlyticsLibraryVersion@aar") {
        transitive = true;
    }
    compile "com.jakewharton:butterknife:$rootProject.butterknifeLibraryVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeLibraryVersion"

    testCompile "junit:junit:$rootProject.junitLibraryVersion"
    testCompile "org.robolectric:robolectric:$rootProject.robolectricLibraryVersion"

    androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.espressoLibraryVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test:runner:0.5'

    androidTestCompile "com.squareup.spoon:spoon-client:$rootProject.spoonLibraryVersion"
}
